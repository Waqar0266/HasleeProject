@model List<Hasslefree.Web.Models.Menu.MenuItem>

@helper DrawMenu(List<Hasslefree.Web.Models.Menu.MenuItem> items, bool child = false)
{
	if (items.Any())
	{
		var lowestNestedLevel = items.Min(i => i.NestedLevel);
		var lowestNestedLevelItems = items.Where(i => i.NestedLevel == lowestNestedLevel);
		foreach (var item in lowestNestedLevelItems)
		{
			<div class="col-md-6 col-lg-3">
				<ul class="list-unstyled">

					@{var childItems = items.Where(i => i.Path.StartsWith(item.Path, StringComparison.CurrentCultureIgnoreCase) && i.NestedLevel == item.NestedLevel + 1).Skip(0).Take(10).ToList();}
					<li class="title">@item.Text</li>

					@if (!childItems.Any())
					{
						<li><em>No Areas Yet</em></li>
					}

					@foreach (var c in childItems)
					{
						var suburbs = items.Where(i => i.Path.StartsWith(c.Path, StringComparison.CurrentCultureIgnoreCase) && i.NestedLevel == 2).Skip(0).Take(10).ToList();
						<li><a style="font-weight: 600;" href="/listings@(c.Path.Replace("-","_").Replace(" ","-").ToLower())">@c.Text</a></li>
						
						foreach (var suburb in suburbs)
						{
							<li><a style="margin-left: 10px;" href="/listings@(suburb.Path.Replace("-","_").Replace(" ","-").ToLower())">@suburb.Text</a></li>
						}
					}

				</ul>
			</div>
		}
	}
}

<li class="nav-item dropdown megamenu">
	<a class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
		Listings
	</a>
	<div class="dropdown-menu">
		<div class="container">
			<div class="row justify-content-md-center">
				<div class="col col-md-8">
					<div class="row">

						@DrawMenu(Model)

					</div>
				</div>
			</div>
		</div>
	</div>
</li>


